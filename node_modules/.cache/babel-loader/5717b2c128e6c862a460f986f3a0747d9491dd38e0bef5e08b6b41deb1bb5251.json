{"ast":null,"code":"var _jsxFileName = \"/Users/jessecole/Desktop/My_Repository/weather-app/src/components/Weather.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Form from './Form';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = props => {\n  _s();\n  const {\n    theCity\n  } = props;\n  const {\n    searchCity\n  } = props;\n\n  // const [feelsLikeF, setFeelsLikeF] = useState();\n  // const [feelsLikeC, setFeelsLikeC] = useState();\n\n  // const [gustM, setGustM] = useState();\n  // const [gustK, setGustK] = useState();\n\n  const [date, setDate] = useState();\n  const [localTime, setLocalTime] = useState();\n  const [city, setCity] = useState();\n  const [region, setRegion] = useState();\n  const [measure, setMeasure] = useState(\"fahrenheit\");\n  const [speedMeasure, setSpeedMeasure] = useState(\"mph\");\n  const [forecastDate, setForecastDate] = useState();\n  const [hourArray, setHourArray] = useState();\n  const [tempF, setTempF] = useState([]);\n  const [tempC, setTempC] = useState([]);\n  const [windM, setWindM] = useState([]);\n  const [windK, setWindK] = useState([]);\n  const [humitidy, setHumitidy] = useState([]);\n  const [condition, setCondition] = useState([]);\n  const [conditionCode, setConditionCode] = useState([]);\n  const [icon, setIcon] = useState();\n  const [text, setText] = useState();\n  let d = new Date().getHours();\n  console.log(d);\n  let arr = [];\n  while (d < 24 && arr.length < 10) {\n    arr.push(d);\n    d++;\n  }\n\n  // setHourArray(arr);\n  console.log(arr);\n  useEffect(() => {\n    axios.get(`http://api.weatherapi.com/v1/forecast.json?key=772fe409b0a648b694d213844232006&q=${theCity}`).then(response => {\n      console.log(response);\n      let fTemps = [];\n      let cTemps = [];\n      let mWinds = [];\n      let kWinds = [];\n      let humitities = [];\n      let conditions = [];\n      let conditionCodes = [];\n      let icons = [];\n      let texts = [];\n      fTemps.push(response.data.forecast.forecastDay[0].hour[0].temp_f);\n      setTempF(fTemps);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [theCity]);\n  console.log(tempF);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-blue-200 h-96 flex justify-center\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      measure: measure,\n      speedMeasure: speedMeasure,\n      localTime: localTime,\n      city: city,\n      region: region,\n      tempF: tempF,\n      tempC: tempC,\n      windM: windM,\n      windK: windK,\n      date: date,\n      setMeasure: setMeasure,\n      setSpeedMeasure: setSpeedMeasure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(Weather, \"n0uOfkGjWNQCcQv6fOeyGRNiN44=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","useNavigate","Form","Card","jsxDEV","_jsxDEV","Weather","props","_s","theCity","searchCity","date","setDate","localTime","setLocalTime","city","setCity","region","setRegion","measure","setMeasure","speedMeasure","setSpeedMeasure","forecastDate","setForecastDate","hourArray","setHourArray","tempF","setTempF","tempC","setTempC","windM","setWindM","windK","setWindK","humitidy","setHumitidy","condition","setCondition","conditionCode","setConditionCode","icon","setIcon","text","setText","d","Date","getHours","console","log","arr","length","push","get","then","response","fTemps","cTemps","mWinds","kWinds","humitities","conditions","conditionCodes","icons","texts","data","forecast","forecastDay","hour","temp_f","catch","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jessecole/Desktop/My_Repository/weather-app/src/components/Weather.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {useParams, useNavigate} from 'react-router-dom';\nimport Form from './Form';\nimport Card from './Card';\n\n\nconst Weather = (props) => {\n\n\n    const {theCity} = props;\n    const {searchCity} = props;\n\n    \n    \n    // const [feelsLikeF, setFeelsLikeF] = useState();\n    // const [feelsLikeC, setFeelsLikeC] = useState();\n    \n    // const [gustM, setGustM] = useState();\n    // const [gustK, setGustK] = useState();\n    \n    const [date, setDate] = useState();\n    const [localTime, setLocalTime] = useState();\n    \n    const [city, setCity] = useState();\n    const [region, setRegion] = useState();\n    const [measure, setMeasure] = useState(\"fahrenheit\");\n    const [speedMeasure, setSpeedMeasure] = useState(\"mph\");\n    const [forecastDate, setForecastDate] = useState();\n\n    const [hourArray, setHourArray] = useState();\n    const [tempF, setTempF] = useState([]);\n    const [tempC, setTempC] = useState([]);\n    const [windM, setWindM] = useState([]);\n    const [windK, setWindK] = useState([]);\n    const [humitidy, setHumitidy] = useState([]);\n    const [condition, setCondition] = useState([]);\n    const [conditionCode, setConditionCode] = useState([]);\n    const [icon, setIcon] = useState();\n    const [text, setText] = useState();\n\n    \n    let d = new Date().getHours();\n    console.log(d);\n    let arr = [];\n    while (d < 24 && arr.length < 10) {\n        arr.push(d);\n        d++;\n    }\n\n\n    // setHourArray(arr);\n    console.log(arr);\n\n    useEffect(() => {\n            axios.get(`http://api.weatherapi.com/v1/forecast.json?key=772fe409b0a648b694d213844232006&q=${theCity}`)\n                .then((response) => {\n                    console.log(response);\n                    let fTemps = [];\n                    let cTemps = [];\n                    let mWinds = [];\n                    let kWinds = [];\n                    let humitities = [];\n                    let conditions = [];\n                    let conditionCodes = [];\n                    let icons = [];\n                    let texts = [];\n                    fTemps.push(response.data.forecast.forecastDay[0].hour[0].temp_f);\n                    setTempF(fTemps);\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n            }, [theCity]);\n\n            console.log(tempF);\n\n\n\n    return (\n        <div className=\"bg-blue-200 h-96 flex justify-center\">\n            <Card measure={measure} speedMeasure={speedMeasure} localTime={localTime} city={city} \n            region={region} tempF={tempF} tempC={tempC}\n            windM={windM} windK={windK} date={date} setMeasure={setMeasure} setSpeedMeasure={setSpeedMeasure}/>\n        </div>\n    );\n};\n\nexport default Weather;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}